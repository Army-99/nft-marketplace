// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NftAdd extends ethereum.Event {
  get params(): NftAdd__Params {
    return new NftAdd__Params(this);
  }
}

export class NftAdd__Params {
  _event: NftAdd;

  constructor(event: NftAdd) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NftRemove extends ethereum.Event {
  get params(): NftRemove__Params {
    return new NftRemove__Params(this);
  }
}

export class NftRemove__Params {
  _event: NftRemove;

  constructor(event: NftRemove) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Nftbuy extends ethereum.Event {
  get params(): Nftbuy__Params {
    return new Nftbuy__Params(this);
  }
}

export class Nftbuy__Params {
  _event: Nftbuy;

  constructor(event: Nftbuy) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NftMarketplace__getNftResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }
}

export class NftMarketplace extends ethereum.SmartContract {
  static bind(address: Address): NftMarketplace {
    return new NftMarketplace("NftMarketplace", address);
  }

  getNft(
    nftAddress: Address,
    tokenId: BigInt
  ): NftMarketplace__getNftResultValue0Struct {
    let result = super.call(
      "getNft",
      "getNft(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<NftMarketplace__getNftResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getNft(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<NftMarketplace__getNftResultValue0Struct> {
    let result = super.tryCall(
      "getNft",
      "getNft(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftMarketplace__getNftResultValue0Struct>(value[0].toTuple())
    );
  }

  getProceeds(seller: Address): BigInt {
    let result = super.call("getProceeds", "getProceeds(address):(uint256)", [
      ethereum.Value.fromAddress(seller)
    ]);

    return result[0].toBigInt();
  }

  try_getProceeds(seller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProceeds",
      "getProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(seller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddNftCall extends ethereum.Call {
  get inputs(): AddNftCall__Inputs {
    return new AddNftCall__Inputs(this);
  }

  get outputs(): AddNftCall__Outputs {
    return new AddNftCall__Outputs(this);
  }
}

export class AddNftCall__Inputs {
  _call: AddNftCall;

  constructor(call: AddNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddNftCall__Outputs {
  _call: AddNftCall;

  constructor(call: AddNftCall) {
    this._call = call;
  }
}

export class BuyNftCall extends ethereum.Call {
  get inputs(): BuyNftCall__Inputs {
    return new BuyNftCall__Inputs(this);
  }

  get outputs(): BuyNftCall__Outputs {
    return new BuyNftCall__Outputs(this);
  }
}

export class BuyNftCall__Inputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyNftCall__Outputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }
}

export class RemoveNftCall extends ethereum.Call {
  get inputs(): RemoveNftCall__Inputs {
    return new RemoveNftCall__Inputs(this);
  }

  get outputs(): RemoveNftCall__Outputs {
    return new RemoveNftCall__Outputs(this);
  }
}

export class RemoveNftCall__Inputs {
  _call: RemoveNftCall;

  constructor(call: RemoveNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveNftCall__Outputs {
  _call: RemoveNftCall;

  constructor(call: RemoveNftCall) {
    this._call = call;
  }
}

export class UpdateNftCall extends ethereum.Call {
  get inputs(): UpdateNftCall__Inputs {
    return new UpdateNftCall__Inputs(this);
  }

  get outputs(): UpdateNftCall__Outputs {
    return new UpdateNftCall__Outputs(this);
  }
}

export class UpdateNftCall__Inputs {
  _call: UpdateNftCall;

  constructor(call: UpdateNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateNftCall__Outputs {
  _call: UpdateNftCall;

  constructor(call: UpdateNftCall) {
    this._call = call;
  }
}

export class WithdrawProceedsCall extends ethereum.Call {
  get inputs(): WithdrawProceedsCall__Inputs {
    return new WithdrawProceedsCall__Inputs(this);
  }

  get outputs(): WithdrawProceedsCall__Outputs {
    return new WithdrawProceedsCall__Outputs(this);
  }
}

export class WithdrawProceedsCall__Inputs {
  _call: WithdrawProceedsCall;

  constructor(call: WithdrawProceedsCall) {
    this._call = call;
  }
}

export class WithdrawProceedsCall__Outputs {
  _call: WithdrawProceedsCall;

  constructor(call: WithdrawProceedsCall) {
    this._call = call;
  }
}
