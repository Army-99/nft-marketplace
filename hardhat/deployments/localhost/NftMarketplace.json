{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "NftMarketPlace__NotApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketplace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__NoProceedes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketplace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__PriceMustBePositive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftMarketplace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftAdd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Nftbuy",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNft",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93ea2858a98b05fa9def3aa238cbca3880707acbd9277fd641a28c4db56bc849",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1413969",
    "logsBloom": "0x
    "blockHash": "0x23d74269180fe86902884f9faca563ad5c89a2b27beb7eb4e36e1d9aff305bb5",
    "transactionHash": "0x93ea2858a98b05fa9def3aa238cbca3880707acbd9277fd641a28c4db56bc849",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1413969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "75800a5c49b95e7c0fbd9121b0c4e305",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NftMarketPlace__NotApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketplace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__NoProceedes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketplace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__PriceMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftMarketplace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Nftbuy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNft\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNft(address,uint256,uint256)\":{\"params\":{\"nftAddress\":\": address of the nft\",\"price\":\": price of the nft\",\"tokenId\":\": token of the nft\"}},\"buyNft(address,uint256)\":{\"params\":{\"nftAddress\":\": address of the nft\",\"tokenId\":\": token of the nft\"}},\"removeNft(address,uint256)\":{\"params\":{\"nftAddress\":\": address of the nft\",\"tokenId\":\": token of the nft\"}},\"updateNft(address,uint256,uint256)\":{\"params\":{\"newPrice\":\": token of the nft\",\"nftAddress\":\": address of the nft\",\"tokenId\":\": token of the nft\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NftAdd(address,address,uint256,uint256)\":{\"notice\":\"EVENTS \"}},\"kind\":\"user\",\"methods\":{\"addNft(address,uint256,uint256)\":{\"notice\":\"Method for add a nft on the marketplace\"},\"buyNft(address,uint256)\":{\"notice\":\"Method for buy a NFT listed\"},\"removeNft(address,uint256)\":{\"notice\":\"Method for remove a NFT listed\"},\"updateNft(address,uint256,uint256)\":{\"notice\":\"Method for update the price of a NFT listed\"},\"withdrawProceeds()\":{\"notice\":\"Method for withdraw \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NftMarketplace__PriceMustBePositive();\\r\\nerror NftMarketPlace__NotApproved();\\r\\nerror NftMarketplace__AlreadyListed(address nftAddress, uint tokenId);\\r\\nerror NftMarketplace__NotNftOwner();\\r\\nerror NftMarketplace__NotListed(address nftAddress,uint tokenId);\\r\\nerror NftMarketplace__PriceNotMet(address nftAddress, uint tokenId, uint price);\\r\\nerror NftMarketplace__NoProceedes();\\r\\nerror NftMarketplace__TransferFailed();\\r\\n\\r\\ncontract NftMarketplace is ReentrancyGuard{\\r\\n    struct Listing{\\r\\n        uint price;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    /**EVENTS */\\r\\n        event NftAdd(address indexed sender, address indexed nftAddress, uint indexed tokenId, uint price); //When NFT is listed\\r\\n        event Nftbuy(address indexed sender, address indexed nftAddress, uint indexed tokenId, uint price); //When a NFT is sold\\r\\n        event NftRemove(address indexed nftAddress, uint indexed tokenId);\\r\\n\\r\\n\\r\\n    /** TYPES */\\r\\n        mapping (address => mapping(uint => Listing)) private s_listings;   //NFT address -> Nft TokenId -> Listing \\r\\n        mapping(address => uint) private s_proceeds;    //Seller proceeds\\r\\n\\r\\n    /**MODIFIERS */\\r\\n        modifier NotListed(address nftAddress, uint tokenId) {\\r\\n            Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n            if(listing.price > 0){revert NftMarketplace__AlreadyListed(nftAddress, tokenId);}\\r\\n            _;\\r\\n        }\\r\\n\\r\\n        modifier isOwner(address nftAddress, uint tokenId, address spender){\\r\\n            IERC721 nft = IERC721(nftAddress);\\r\\n            address owner = nft.ownerOf(tokenId);\\r\\n            if(spender != owner){ revert NftMarketplace__NotNftOwner();}\\r\\n            _;\\r\\n        }\\r\\n\\r\\n        modifier isListed(address nftAddress, uint tokenId) {\\r\\n            Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n            if(listing.price <= 0){revert NftMarketplace__NotListed(nftAddress, tokenId);}\\r\\n            _;\\r\\n        }\\r\\n\\r\\n    /** MAIN FUNCTIONS */\\r\\n        /**\\r\\n            @notice Method for add a nft on the marketplace\\r\\n            @param nftAddress: address of the nft\\r\\n            @param price: price of the nft\\r\\n            @param tokenId: token of the nft\\r\\n        */\\r\\n        function addNft(\\r\\n            address nftAddress\\r\\n            ,uint price\\r\\n            ,uint tokenId\\r\\n            ) external\\r\\n                NotListed(nftAddress, tokenId) \\r\\n                isOwner(nftAddress, tokenId, msg.sender)\\r\\n            {\\r\\n                if(price<=0){revert NftMarketplace__PriceMustBePositive();}\\r\\n                //Check validity\\r\\n                IERC721 nft = IERC721(nftAddress);\\r\\n                if(nft.getApproved(tokenId) != address(this)){revert NftMarketPlace__NotApproved();}\\r\\n                s_listings[nftAddress][tokenId] = Listing (price, msg.sender);\\r\\n                emit NftAdd(msg.sender, nftAddress, tokenId, price);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n            @notice Method for buy a NFT listed\\r\\n            @param nftAddress: address of the nft\\r\\n            @param tokenId: token of the nft\\r\\n        */\\r\\n        function buyNft(\\r\\n            address nftAddress\\r\\n            ,uint tokenId\\r\\n            ) external payable \\r\\n            isListed(nftAddress, tokenId) \\r\\n            nonReentrant\\r\\n            {\\r\\n                Listing memory listedItem = s_listings[nftAddress][tokenId];\\r\\n                if(msg.value < listedItem.price) { revert NftMarketplace__PriceNotMet(nftAddress,tokenId, listedItem.price);}\\r\\n\\r\\n                s_proceeds[listedItem.seller]+=msg.value;\\r\\n                delete (s_listings[nftAddress][tokenId]);\\r\\n                IERC721(nftAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);\\r\\n\\r\\n                emit Nftbuy(msg.sender, nftAddress, tokenId, listedItem.price);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n            @notice Method for remove a NFT listed\\r\\n            @param nftAddress: address of the nft\\r\\n            @param tokenId: token of the nft\\r\\n        */\\r\\n        function removeNft(\\r\\n            address nftAddress\\r\\n            ,uint tokenId\\r\\n            ) external \\r\\n            isListed(nftAddress, tokenId)\\r\\n            isOwner(nftAddress, tokenId, msg.sender)\\r\\n            {\\r\\n            delete (s_listings[nftAddress][tokenId]);\\r\\n            emit NftRemove(nftAddress, tokenId);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n            @notice Method for update the price of a NFT listed\\r\\n            @param nftAddress: address of the nft\\r\\n            @param tokenId: token of the nft\\r\\n            @param newPrice: token of the nft\\r\\n        */\\r\\n        function updateNft(\\r\\n            address nftAddress        \\r\\n            ,uint tokenId\\r\\n            ,uint newPrice\\r\\n            ) external\\r\\n                isListed(nftAddress, tokenId)\\r\\n                isOwner(nftAddress, tokenId, msg.sender)\\r\\n            {\\r\\n                s_listings[nftAddress][tokenId].price = newPrice;\\r\\n                emit NftAdd(msg.sender,nftAddress, tokenId, newPrice);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n            @notice Method for withdraw \\r\\n        */\\r\\n        function withdrawProceeds() external nonReentrant{\\r\\n            uint proceeds = s_proceeds[msg.sender];\\r\\n            if(proceeds <= 0) {revert NftMarketplace__NoProceedes();}\\r\\n            s_proceeds[msg.sender] = 0;\\r\\n            (bool success, ) = payable(msg.sender).call{value: proceeds}(\\\"\\\");\\r\\n            if(!success){ revert NftMarketplace__TransferFailed();}\\r\\n        }\\r\\n\\r\\n    \\r\\n    /* VIEWS */\\r\\n        function getNft(\\r\\n            address nftAddress\\r\\n            ,uint tokenId\\r\\n            ) external view isListed(nftAddress, tokenId) returns(Listing memory){\\r\\n                return s_listings[nftAddress][tokenId];\\r\\n        }\\r\\n\\r\\n        function getProceeds(\\r\\n            address seller\\r\\n            ) external view returns(uint){\\r\\n                return s_proceeds[seller];\\r\\n        }\\r\\n        \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x85a4294bf5a4b245e7726554b3f9d02ba69c9d350cb13b146f331ddaa254d0dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550611853806100286000396000f3fe6080604052600436106100705760003560e01c80634ddf4f8f1161004e5780634ddf4f8f146101185780637d88aa89146101345780639038e6931461015d578063fc82a5ce1461017457610070565b80631c6932b61461007557806330cfeda9146100b2578063379bac14146100ef575b600080fd5b34801561008157600080fd5b5061009c6004803603810190610097919061149b565b61019d565b6040516100a99190611528565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d49190611543565b610377565b6040516100e6919061157f565b60405180910390f35b3480156100fb57600080fd5b506101166004803603810190610111919061159a565b6103c0565b005b610132600480360381019061012d919061149b565b610836565b005b34801561014057600080fd5b5061015b6004803603810190610156919061159a565b610c69565b005b34801561016957600080fd5b50610172610f3a565b005b34801561018057600080fd5b5061019b6004803603810190610196919061149b565b6110fa565b005b6101a56113d2565b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116102b15782826040517f6d350f220000000000000000000000000000000000000000000000000000000081526004016102a89291906115fc565b60405180910390fd5b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050935050505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b82816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111156104cd5782826040517fc2f0d7090000000000000000000000000000000000000000000000000000000081526004016104c49291906115fc565b60405180910390fd5b858433600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610510919061157f565b60206040518083038186803b15801561052857600080fd5b505afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610560919061163a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146105c7576040517f436a035d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a11610601576040517f40dc723b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8c6040518263ffffffff1660e01b8152600401610656919061157f565b60206040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a6919061163a565b73ffffffffffffffffffffffffffffffffffffffff16146106f3576040517febc1699700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050898c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffda6e6c0f6b2f48e65a264c0e90c5be536078bfbd8c4ee73a5fa2d91cbafa8498e604051610820919061157f565b60405180910390a4505050505050505050505050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116109425782826040517f6d350f220000000000000000000000000000000000000000000000000000000081526004016109399291906115fc565b60405180910390fd5b60026000541415610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f906116c4565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610aa057858582600001516040517f817ce9f1000000000000000000000000000000000000000000000000000000008152600401610a97939291906116e4565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610af3919061174a565b92505081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401610bbd939291906117a0565b600060405180830381600087803b158015610bd757600080fd5b505af1158015610beb573d6000803e3d6000fd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4b4608b50cddf6519c494dd831859f46f9fb2d0dfb5aec491fd60675b96e96b88460000151604051610c51919061157f565b60405180910390a45060016000819055505050505050565b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610d755782826040517f6d350f22000000000000000000000000000000000000000000000000000000008152600401610d6c9291906115fc565b60405180910390fd5b858533600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610db8919061157f565b60206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e08919061163a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f436a035d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060000181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffda6e6c0f6b2f48e65a264c0e90c5be536078bfbd8c4ee73a5fa2d91cbafa8498c604051610f25919061157f565b60405180910390a45050505050505050505050565b60026000541415610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f77906116c4565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611006576040517f21c6eb2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161107190611808565b60006040518083038185875af1925050503d80600081146110ae576040519150601f19603f3d011682016040523d82523d6000602084013e6110b3565b606091505b50509050806110ee576040517fa05884ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506001600081905550565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116112065782826040517f6d350f220000000000000000000000000000000000000000000000000000000081526004016111fd9291906115fc565b60405180910390fd5b848433600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401611249919061157f565b60206040518083038186803b15801561126157600080fd5b505afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611299919061163a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611300576040517f436a035d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050888a73ffffffffffffffffffffffffffffffffffffffff167f0a28f920ee61891588a979a71141b171f556b10fac0ca410af898b5d54e4e72760405160405180910390a350505050505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061143282611407565b9050919050565b61144281611427565b811461144d57600080fd5b50565b60008135905061145f81611439565b92915050565b6000819050919050565b61147881611465565b811461148357600080fd5b50565b6000813590506114958161146f565b92915050565b600080604083850312156114b2576114b1611402565b5b60006114c085828601611450565b92505060206114d185828601611486565b9150509250929050565b6114e481611465565b82525050565b6114f381611427565b82525050565b60408201600082015161150f60008501826114db565b50602082015161152260208501826114ea565b50505050565b600060408201905061153d60008301846114f9565b92915050565b60006020828403121561155957611558611402565b5b600061156784828501611450565b91505092915050565b61157981611465565b82525050565b60006020820190506115946000830184611570565b92915050565b6000806000606084860312156115b3576115b2611402565b5b60006115c186828701611450565b93505060206115d286828701611486565b92505060406115e386828701611486565b9150509250925092565b6115f681611427565b82525050565b600060408201905061161160008301856115ed565b61161e6020830184611570565b9392505050565b60008151905061163481611439565b92915050565b6000602082840312156116505761164f611402565b5b600061165e84828501611625565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006116ae601f83611667565b91506116b982611678565b602082019050919050565b600060208201905081810360008301526116dd816116a1565b9050919050565b60006060820190506116f960008301866115ed565b6117066020830185611570565b6117136040830184611570565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061175582611465565b915061176083611465565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117955761179461171b565b5b828201905092915050565b60006060820190506117b560008301866115ed565b6117c260208301856115ed565b6117cf6040830184611570565b949350505050565b600081905092915050565b50565b60006117f26000836117d7565b91506117fd826117e2565b600082019050919050565b6000611813826117e5565b915081905091905056fea2646970667358221220c1597edd5bcf6c0e2d8ec50c8a08e336df18835d4027b865ae78a8d61686ad1464736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNft(address,uint256,uint256)": {
        "params": {
          "nftAddress": ": address of the nft",
          "price": ": price of the nft",
          "tokenId": ": token of the nft"
        }
      },
      "buyNft(address,uint256)": {
        "params": {
          "nftAddress": ": address of the nft",
          "tokenId": ": token of the nft"
        }
      },
      "removeNft(address,uint256)": {
        "params": {
          "nftAddress": ": address of the nft",
          "tokenId": ": token of the nft"
        }
      },
      "updateNft(address,uint256,uint256)": {
        "params": {
          "newPrice": ": token of the nft",
          "nftAddress": ": address of the nft",
          "tokenId": ": token of the nft"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NftAdd(address,address,uint256,uint256)": {
        "notice": "EVENTS "
      }
    },
    "kind": "user",
    "methods": {
      "addNft(address,uint256,uint256)": {
        "notice": "Method for add a nft on the marketplace"
      },
      "buyNft(address,uint256)": {
        "notice": "Method for buy a NFT listed"
      },
      "removeNft(address,uint256)": {
        "notice": "Method for remove a NFT listed"
      },
      "updateNft(address,uint256,uint256)": {
        "notice": "Method for update the price of a NFT listed"
      },
      "withdrawProceeds()": {
        "notice": "Method for withdraw "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 243,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)208_storage))"
      },
      {
        "astId": 247,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)208_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)208_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)208_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)208_storage"
      },
      "t_struct(Listing)208_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.Listing",
        "members": [
          {
            "astId": 205,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 207,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}